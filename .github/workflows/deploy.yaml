name: CI/CD Pipeline - Flask Comments API

on:
  push:
    branches: [ main, master, production ]
  pull_request:
    branches: [ main, master ]

# Add permissions for GitHub Actions
permissions:
  contents: write
  pull-requests: write
  security-events: write

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: flask-comments-api
  REGION: us-central1
  REPOSITORY: uteq-repositorio
  IMAGE_NAME: flask-comments-api
  REGISTRY_URL: us-central1-docker.pkg.dev

jobs:
  # Job 1: Code Quality and Security (with proper error handling)
  code-quality:
    name: Code Quality and Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Use a Personal Access Token if available, otherwise default token
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort bandit safety
    
    # Option 1: Just check formatting (recommended for now)
    - name: Check code formatting with Black
      id: black-check
      run: |
        if ! black . --check --diff; then
          echo "formatting_needed=true" >> $GITHUB_OUTPUT
          echo "❌ Code formatting issues found. Run 'black .' locally to fix."
          exit 1
        else
          echo "formatting_needed=false" >> $GITHUB_OUTPUT
          echo "✅ Code formatting is correct."
        fi
    
    - name: Check import sorting with isort
      run: |
        if ! isort . --check-only --diff; then
          echo "❌ Import sorting issues found. Run 'isort .' locally to fix."
          exit 1
        else
          echo "✅ Import sorting is correct."
        fi
    
    # Alternative: Auto-fix approach (only if you have proper permissions)
    # - name: Auto-format code with Black and isort (if permissions allow)
    #   if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    #   run: |
    #     black .
    #     isort .
    # 
    # - name: Check if formatting changed files
    #   if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    #   id: format-check
    #   run: |
    #     if [[ -n $(git status --porcelain) ]]; then
    #       echo "changes=true" >> $GITHUB_OUTPUT
    #     else
    #       echo "changes=false" >> $GITHUB_OUTPUT
    #     fi
    # 
    # - name: Commit formatting changes
    #   if: steps.format-check.outputs.changes == 'true' && github.event_name == 'push'
    #   run: |
    #     git config --local user.email "action@github.com"
    #     git config --local user.name "GitHub Action"
    #     git add .
    #     git commit -m "Auto-format code with Black and isort [skip ci]"
    #     git push
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Security check with Bandit
      run: bandit -r . -f json -o bandit-report.json || true
    
    - name: Check dependencies with Safety
      run: safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Job 2: Run Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flask-testing coverage
    
    - name: Run tests with coverage
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: env.CODECOV_TOKEN != ''
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: htmlcov/

  # Job 3: Build and Test Docker Image
  docker-build:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        load: true
        tags: flask-comments-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 8080:8080 \
          -e FLASK_ENV=production \
          -e SECRET_KEY=test-key \
          flask-comments-api:test
        
        # Wait for container to start
        echo "Waiting for container to start..."
        sleep 30
        
        # Check container is running
        if ! docker ps | grep test-container; then
          echo "❌ Container failed to start"
          docker logs test-container
          exit 1
        fi
        
        # Health checks with retries
        echo "Running health checks..."
        for i in {1..5}; do
          if curl -f --max-time 10 http://localhost:8080/health; then
            echo "✅ Health check passed"
            break
          fi
          if [ $i -eq 5 ]; then
            echo "❌ Health check failed after 5 attempts"
            docker logs test-container
            exit 1
          fi
          echo "Health check attempt $i failed, retrying in 10s..."
          sleep 10
        done
        
        # Test main endpoint
        if curl -f --max-time 10 http://localhost:8080/; then
          echo "✅ Main endpoint test passed"
        else
          echo "❌ Main endpoint test failed"
          docker logs test-container
          exit 1
        fi
        
        # Cleanup
        docker stop test-container
        docker rm test-container
    
    - name: Security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'flask-comments-api:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  # Job 4: Deploy to Production
  deploy:
    name: Deploy to Google Cloud Run
    runs-on: ubuntu-latest
    needs: [code-quality, test, docker-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Verify GCP Authentication
      run: |
        echo "Verifying GCP authentication..."
        gcloud auth list --filter=status:ACTIVE --format="value(account)"
        gcloud config get-value project
    
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker $REGISTRY_URL --quiet
    
    - name: Build and push Docker image
      run: |
        echo "Building Docker image..."
        docker build . --platform linux/amd64 \
          -t $REGISTRY_URL/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:$GITHUB_SHA \
          -t $REGISTRY_URL/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:latest
        
        echo "Pushing Docker image..."
        docker push $REGISTRY_URL/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:$GITHUB_SHA
        docker push $REGISTRY_URL/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:latest
    
    - name: Deploy to Cloud Run
      run: |
        echo "Deploying to Cloud Run..."
        gcloud run deploy $SERVICE_NAME \
          --image $REGISTRY_URL/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10 \
          --min-instances 0 \
          --set-env-vars="ENVIRONMENT=production,FLASK_ENV=production" \
          --set-env-vars="LOG_LEVEL=INFO,LOG_FORMAT=json" \
          --timeout 300 \
          --concurrency 80
    
    - name: Get service URL
      id: get-url
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
          --region=$REGION --format='value(status.url)')
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "✅ Service URL: $SERVICE_URL"
    
    - name: Post-deployment verification
      run: |
        echo "Waiting for deployment to be ready..."
        sleep 60
        
        # Comprehensive health checks
        SERVICE_URL="${{ steps.get-url.outputs.SERVICE_URL }}"
        
        echo "Running post-deployment verification..."
        for endpoint in "/health" "/" "/comments"; do
          echo "Testing endpoint: $endpoint"
          for i in {1..3}; do
            if curl -f --max-time 30 "${SERVICE_URL}${endpoint}"; then
              echo "✅ $endpoint test passed"
              break
            fi
            if [ $i -eq 3 ]; then
              echo "❌ $endpoint test failed after 3 attempts"
              exit 1
            fi
            echo "Attempt $i failed for $endpoint, retrying in 30s..."
            sleep 30
          done
        done
        
        echo "✅ All post-deployment tests passed!"
    
    - name: Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: ✅ Successful" >> $GITHUB_STEP_SUMMARY
        echo "**Service URL**: ${{ steps.get-url.outputs.SERVICE_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "**Docker Image**: \`$REGISTRY_URL/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:$GITHUB_SHA\`" >> $GITHUB_STEP_SUMMARY
        echo "**Deployed At**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: \`$GITHUB_SHA\`" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Service URL](${{ steps.get-url.outputs.SERVICE_URL }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Health Check](${{ steps.get-url.outputs.SERVICE_URL }}/health)" >> $GITHUB_STEP_SUMMARY
        echo "- [Comments API](${{ steps.get-url.outputs.SERVICE_URL }}/comments)" >> $GITHUB_STEP_SUMMARY

  # Job 5: Notification
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Deployment notification
      run: |
        case "${{ needs.deploy.result }}" in
          "success")
            echo "Deployment successful!"
            echo "The Flask Comments API has been deployed successfully."
            ;;
          "failure")
            echo "Deployment failed!"
            echo "Please check the deployment logs for details."
            ;;
          "skipped")
            echo "⏭Deployment skipped"
            echo "Deployment only runs on main/master branch pushes."
            ;;
          *)
            echo "Deployment status: ${{ needs.deploy.result }}"
            ;;
        esac